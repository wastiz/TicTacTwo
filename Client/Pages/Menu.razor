@page "/"
@attribute [Authorize]
@using System.Net
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using Client.Components.Menu
@using Shared.GameConfigDtos
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Menu</PageTitle>

<div class="container h-100">
  <div class="row left-panel h-100">
    <div class="col-12 col-sm-12 col-md-6 col-lg-6 d-flex flex-column mt-5 left-menu">
      <div class="@leftTransitionClass w-100 h-100">
        @switch (currentScreen)
        {
          case MenuScreen.MainOptions:
            <MainOptions
              OnNewGame="() => SetScreen(MenuScreen.NewGame)"
              OnLoadGame="() => SetScreen(MenuScreen.LoadGame)"
              OnGameConfigs="() => SetScreen(MenuScreen.GameConfigs)" />
            break;

          case MenuScreen.NewGame:
            <NewGame 
              OnMainOptions="() => SetScreen(MenuScreen.MainOptions)"
              ConfigList="@GameConfigs"
              />
            break;

          case MenuScreen.LoadGame:
            <LoadGame OnMainOptions="() => SetScreen(MenuScreen.MainOptions)" />
            break;

          case MenuScreen.GameConfigs:
            <GameConfigs
              OnMainOptions="() => SetScreen(MenuScreen.MainOptions)"
              ConfigList="@GameConfigs"/>
            break;
        }
      </div>
    </div>
    <div class="col-12 col-sm-12 col-md-6 col-lg-6 d-flex align-items-center justify-content-center">
        @if (currentScreen == MenuScreen.GameConfigs)
        {
            <div class="@rightTransitionClass">
              <CreateConfig 
                ConfigList="@GameConfigs"
                OnConfigCreated="async (config) => await HandleConfigCreated(config)"
                />
            </div>
        }
        else
        {
            <Animation></Animation>
        }
    </div>
  </div>
</div>

@code {
  private MenuScreen currentScreen = MenuScreen.MainOptions;
  private string leftTransitionClass = "left-fade-in";
  private string rightTransitionClass = "right-fade-in";
  
  private List<GameConfigDto> GameConfigs = new List<GameConfigDto>();

  private async Task SetScreen(MenuScreen newScreen)
  {
    leftTransitionClass = "fade-out";
    rightTransitionClass = "fade-out";
    StateHasChanged();
    
    await Task.Delay(300);
    
    currentScreen = newScreen;
    leftTransitionClass = "left-fade-in";
    rightTransitionClass = "right-fade-in";
    StateHasChanged();
  }

  private enum MenuScreen
  {
    MainOptions,
    NewGame,
    LoadGame,
    GameConfigs
  }

  protected override async Task OnInitializedAsync()
  {
    var token = await localStorage.GetItemAsync<string>("accessToken");
    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

    var configs = await Http.GetFromJsonAsync<List<GameConfigDto>>("api/game-configs/user");
    if (configs != null) GameConfigs = configs;
    
    StateHasChanged();
  }

  private async Task HandleConfigCreated(GameConfigDto config)
  {
    GameConfigs.Add(config);
    StateHasChanged();
  }
}