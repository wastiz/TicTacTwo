@page "/"
@using System.Net
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using Client.Components.Menu
@using Shared.GameConfigDtos
@attribute [Authorize]
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<PageTitle>Menu</PageTitle>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form method="post" asp-page-handler="Connect">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">Enter Game Id to connect</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="text" name="sessionId" class="form-control" placeholder="Type here..." />
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Continue</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="container h-100">
  <div class="row left-panel h-100">
    <div class="col-12 col-sm-12 col-md-4 col-lg-4 d-flex flex-column new-game-section mt-5">
      <div class="@transitionClass">
        @switch (currentScreen)
        {
          case MenuScreen.MainOptions:
            <MainOptions
              OnNewGame="() => SetScreen(MenuScreen.NewGame)"
              OnLoadGame="() => SetScreen(MenuScreen.LoadGame)"
              OnGameConfigs="() => SetScreen(MenuScreen.GameConfigs)" />
            break;

          case MenuScreen.NewGame:
            <NewGame 
              OnMainOptions="() => SetScreen(MenuScreen.MainOptions)"
              ConfigList="@GameConfigs"
              />
            break;

          case MenuScreen.LoadGame:
            <LoadGame OnMainOptions="() => SetScreen(MenuScreen.MainOptions)" />
            break;

          case MenuScreen.GameConfigs:
            <GameConfigs 
              OnMainOptions="() => SetScreen(MenuScreen.MainOptions)"
              ConfigList="@GameConfigs"
              />
            break;
        }
      </div>
    </div>
    <div class="col-12 col-sm-12 col-md-8 col-lg-8 d-flex align-items-center justify-content-center">
        Here will be animation
    </div>
  </div>
</div>

@code {
  private MenuScreen currentScreen = MenuScreen.MainOptions;
  private string transitionClass = "fade-in";

  private async Task SetScreen(MenuScreen newScreen)
  {
    transitionClass = "fade-out";
    StateHasChanged();
    await Task.Delay(400);
    currentScreen = newScreen;
    transitionClass = "fade-in";
    StateHasChanged();
  }

  private enum MenuScreen
  {
    MainOptions,
    NewGame,
    LoadGame,
    GameConfigs
  }
  
  private List<GameConfigDto> GameConfigs = new List<GameConfigDto>();

  protected override async Task OnInitializedAsync()
  {
    var token = await localStorage.GetItemAsync<string>("accessToken");
    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

    var configs = await Http.GetFromJsonAsync<List<GameConfigDto>>("http://localhost:5192/api/game-configs/user");
    if (configs != null) GameConfigs = configs;
    
    Console.WriteLine(configs);

    StateHasChanged();
  }
}
