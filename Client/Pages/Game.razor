@page "/game/{SessionId}"
@using System.Net.Http.Headers
@using Domain
@using Shared.GameSessionDtos
@using Client.Components.Game
@using Shared.GameDtos
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (Model is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container mt-4">
        @if (Model.GameState.Win == 3)
        {
            <div class="text-center">
                <h1>It's a draw</h1>
                <button class="btn btn-primary" @onclick="OpenSaveModal">Save and back to Menu</button>
            </div>
        }
        else if (Model.GameState.Win == 1 || Model.GameState.Win == 2)
        {
            <div class="text-center">
                <h1>Player @Model.GameState.Win wins!</h1>
                <button class="btn btn-primary" @onclick="OpenSaveModal">Save and back to Menu</button>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-lg-8">
                    <h4>Player @Model.GameState.PlayerNumber is thinking</h4>
                    <GameBoard GameState="@Model.GameState"
                               GameConfig="@Model.GameConfiguration"
                               ShowMovementOptions="Model.GameState.Player1Options || Model.GameState.Player2Options"
                               OnCellClick="HandleCellClick"
                               OnMoveBoard="HandleMoveBoard" />
                </div>
                <div class="col-lg-4 mt-4">
                    <button class="btn btn-primary mb-3" @onclick="OpenSaveModal">Save and back to Menu</button>
                    <div>
                        <h5>Rules & Guide</h5>
                        <p>The goal is to score @Model.GameConfiguration.WinCondition chips in a row</p>
                        <p>Both players have @Model.GameConfiguration.Player1Chips chips</p>
                        <p>You can act only inside the red-bordered grid</p>
                        <p>To unlock moves you must place @Model.GameConfiguration.OptionsAfterNMoves chips</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showSaveModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Would you like to give a name for save?</h5>
                    <button type="button" class="btn-close" @onclick="CloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" @bind="SaveName" placeholder="Type name..." />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveGame">Continue</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string SessionId { get; set; }

    private GameSessionDto Model;
    private bool showSaveModal = false;
    private string SaveName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
        Model = await Http.GetFromJsonAsync<GameSessionDto>($"http://localhost:5192/api/game-sessions/{SessionId}");
    }
    
    private async Task HandleCellClick((int x, int y) pos)
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
        Console.WriteLine($"{pos.x}, {pos.y}");
        
        var response = await Http.PostAsJsonAsync($"http://localhost:5192/api/game/{SessionId}/click", new CellClickRequest() { X = pos.x, Y = pos.y });
        var data = await response.Content.ReadFromJsonAsync<GameState>();
        if (data is not null)
        {
          Model.GameState = data;
        }
    }

    private async Task HandleMoveBoard(string direction)
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
      var response = await Http.PostAsJsonAsync($"http://localhost:5192/api/game/{SessionId}/move", new MoveRequest() { Direction = direction });
      var data = await response.Content.ReadFromJsonAsync<GameState>();
      if (data is not null)
      {
        Model.GameState = data;
      }
    }

    private async Task MoveChip(int startX, int startY, int endX, int endY)
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
      var response = await Http.PostAsJsonAsync($"http://localhost:5192/api/game/{SessionId}/move-chip", new { startX, startY, endX, endY });
      var data = await response.Content.ReadFromJsonAsync<GameState>();
      if (data is not null)
      {
        Model.GameState = data;
      }
    }

    private async Task SaveGame()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
      await Http.PostAsJsonAsync("http://localhost:5192/api/game/save", new { SessionId, Name = SaveName });
      Navigation.NavigateTo("/");
    }

    private void OpenSaveModal() => showSaveModal = true;
    private void CloseSaveModal() => showSaveModal = false;
}
