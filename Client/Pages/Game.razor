@page "/game/{SessionId}"
@attribute [Authorize]
@using System.Net.Http.Headers
@using Shared.GameSessionDtos
@using Client.Components.Game
@using Shared
@using Shared.GameDtos
@using Shared.GameStateDtos
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (GameSession is null)
{
    <p>Loading...</p>
}
else
{
    <div class="container mt-4">
        @if (GameSession.GameState.Win == 3)
        {
            <div class="text-center">
                <h1>It's a draw</h1>
                <button class="btn btn-primary" @onclick="HandleOpenSaveModal">Save and back to Menu</button>
            </div>
        }
        else if (GameSession.GameState.Win == 1 || GameSession.GameState.Win == 2)
        {
            <div class="text-center">
                <h1>Player @GameSession.GameState.Win wins!</h1>
                <button class="btn btn-primary" @onclick="HandleOpenSaveModal">Save and back to Menu</button>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-12 col-lg-8">
                    <div class="d-flex flex-row justify-content-between">
                        <h4>Player @GameSession.GameState.PlayerNumber 's turn</h4>
                        <p class="text-danger">@ErrorMessage</p>
                    </div>
                    <GameBoard GameState="@GameSession.GameState"
                               GameConfig="@GameSession.GameConfiguration"
                               ShowMovementOptions="GameSession.GameState.PlayerNumber == 1 && GameSession.GameState.Player1Abilities || GameSession.GameState.PlayerNumber == 2 && GameSession.GameState.Player2Abilities"
                               OnCellClick="HandlePlaceChip"
                               OnMoveBoard="HandleMoveBoard"
                               OnMoveChip="HandleMoveChip"
                               />
                </div>
                <div class="col-12 col-lg-4 mt-4">
                    <GameInfo
                        GameConfig="@GameSession.GameConfiguration"
                        GameState="@GameSession.GameState"
                        OnOpenSaveModal="HandleOpenSaveModal"
                        />
                </div>
            </div>
        }
    </div>
}

@if (showSaveModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Would you like to give a name for save?</h5>
                    <button type="button" class="btn-close" @onclick="HandleCloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" @bind="SaveName" placeholder="Type name..." />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveGame">Continue</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string SessionId { get; set; }

    private GameSessionDto GameSession;
    private bool showSaveModal = false;
    private string SaveName = string.Empty;
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
        GameSession = await Http.GetFromJsonAsync<GameSessionDto>($"api/game-sessions/{SessionId}");
    }
    
    private async Task HandlePlaceChip(PlaceChipRequest request)
    {
        ErrorMessage = string.Empty;
    
        try
        {
            var token = await localStorage.GetItemAsync<string>("accessToken");
            if (token != null)
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
        
            var response = await Http.PostAsJsonAsync($"api/game/{SessionId}/place-chip", request);
        
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<GameStateDto>();
                if (data is not null)
                {
                    GameSession.GameState = data;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorContent = await response.Content.ReadFromJsonAsync<Response>();
                ErrorMessage = errorContent?.Message ?? "Invalid request";
            }
            else
            {
                ErrorMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Request failed: {ex.Message}";
        }
    
        StateHasChanged();
    }

    private async Task HandleMoveBoard(MoveBoardRequest request)
    {
        ErrorMessage = string.Empty;
        try
        {
            var token = await localStorage.GetItemAsync<string>("accessToken");
            if (token != null)
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
        
            var response = await Http.PostAsJsonAsync($"api/game/{SessionId}/move-board", request);
        
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<GameStateDto>();
                if (data is not null)
                {
                    GameSession.GameState = data;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorContent = await response.Content.ReadFromJsonAsync<Response>();
                ErrorMessage = errorContent?.Message ?? "Invalid request";
            }
            else
            {
                ErrorMessage = $"Error: {response.StatusCode}";
            }
            
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Network error: {ex.Message}";
        }
        StateHasChanged();
    }

    private async Task HandleMoveChip(MoveChipRequest request)
    {
        ErrorMessage = string.Empty;
        try
        {
            var token = await localStorage.GetItemAsync<string>("accessToken");
            if (token != null)
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }
        
            var response = await Http.PostAsJsonAsync($"api/game/{SessionId}/move-chip", request);
        
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<GameStateDto>();
                if (data is not null)
                {
                    GameSession.GameState = data;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorContent = await response.Content.ReadFromJsonAsync<Response>();
                ErrorMessage = errorContent?.Message ?? "Invalid request";
            }
            else
            {
                ErrorMessage = $"Error: {response.StatusCode}";
            }
            
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Network error: {ex.Message}";
        }
        StateHasChanged();
    }

    private async Task SaveGame()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
        await Http.PostAsJsonAsync($"api/game-sessions/{SessionId}/name", new RenameDto() { Name = SaveName });
        Navigation.NavigateTo("/");
    }

    private void HandleOpenSaveModal() => showSaveModal = true;
    private void HandleCloseSaveModal() => showSaveModal = false;
}
