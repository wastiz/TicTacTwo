@page "/game-online/{SessionId}"
@using System.Net.Http.Headers
@using Client.Components.Menu
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Shared.GameSessionDtos
@using Shared.GameStateDtos
@using Client.Components.Game
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container mt-4">
    @if (GameSession.GameState.Win == 3)
    {
        <div class="col-12 d-flex flex-column align-items-center justify-content-center">
            <h1 class="mb-3">It's a draw</h1>
            <button class="btn btn-primary" @onclick="ShowSaveModal">
                Save and back to Menu
            </button>
        </div>
    }
    else if (GameSession.GameState.Win == 1 || GameSession.GameState.Win == 2)
    {
        <div class="col-12 d-flex flex-column align-items-center justify-content-center">
            <h1>Player @GameSession.GameState.Win wins!</h1>
            <button class="btn btn-primary" @onclick="ShowSaveModal">
                Save and back to Menu
            </button>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12 col-lg-8">
                @if (!GameStarted)
                {
                    <div id="waiting-screen">
                        <h1>Waiting for a player to join...</h1>
                        <p><strong>@SessionId</strong></p>
                        <p id="waiting-message">Waiting for another player to join...</p>
                    </div>
                }
                else
                {
                    <div id="game-screen">
                        <div id="message-container" class="mb-3">
                            <b class="handler-text">Player @GameSession.GameState.PlayerNumber is thinking</b>
                        </div>

                        <GameBoard GameState="@GameSession.GameState"
                                   GameConfig="@GameSession.GameConfiguration"
                                   ShowMovementOptions="GameSession.GameState.Player1Options || GameSession.GameState.Player2Options"
                                   OnCellClick="HandleCellClick"
                                   OnMoveBoard="HandleMoveBoard" />
                    </div>
                }
            </div>

            <div class="col-12 col-lg-4 mt-5">
                <button class="btn btn-primary mb-2" @onclick="ShowSaveModal" 
                        disabled="@(UserNumber == 2)">
                    Save and back to Menu
                </button>

                <div class="accordion accordion-flush" id="accordionRules">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" 
                                    data-bs-toggle="collapse" data-bs-target="#flush-collapseOne">
                                <b>Rules & Guide</b>
                            </button>
                        </h2>
                        <div id="flush-collapseOne" class="accordion-collapse collapse" 
                             data-bs-parent="#accordionRules">
                            <div class="accordion-body">
                                The goal is to score @GameSession.GameConfiguration.WinCondition chips in a row
                                <br>
                                Both players have @GameSession.GameConfiguration.Player1Chips chips to make this
                                <br>
                                You can place/move chips only in grid @GameSession.GameConfiguration.MovableBoardWidth x @GameSession.GameConfiguration.MovableBoardHeight (it's bordered by red line)
                                <br>
                                To move board or your chip you have to place @GameSession.GameConfiguration.OptionsAfterNMoves chips firstly
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Save Game Modal -->
@if (ShowModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Would you like to give a name for save?</h5>
                    <button type="button" class="btn-close" @onclick="CloseSaveModal"></button>
                </div>
                <div class="modal-body">
                    <input @bind="SaveName" class="form-control" placeholder="Type here..." />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSaveModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveGame">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string SessionId { get; set; }
    
    private GameSessionDto GameSession;
    private ElementReference BoardElement;
    private HubConnection HubConnection;
    private bool GameStarted = false;
    private bool ShowModal = false;
    private string SaveName = string.Empty;
    private string UserId = string.Empty;
    private int UserNumber = 0;
    private DotNetObjectReference<GameOnline> DotNetRef;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
        GameSession = await Http.GetFromJsonAsync<GameSessionDto>($"http://localhost:5192/api/game-sessions/{SessionId}");
        
        DotNetRef = DotNetObjectReference.Create(this);
        UserId = await localStorage.GetItemAsync<string>("accessToken");
        
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        HubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5192/gameHub", options =>
            {
                options.AccessTokenProvider = async () => await localStorage.GetItemAsync<string>("accessToken");
            })
            .WithAutomaticReconnect()
            .Build();

        HubConnection.On<string>("Error", message =>
            JSRuntime.InvokeVoidAsync("alert", message));

        HubConnection.On<string>("PlayerJoined", playerId =>
            JSRuntime.InvokeVoidAsync("updateWaitingMessage", "You have joined. Now waiting for other player"));

        HubConnection.On<GameStateDto>("GameStarted", async state =>
            await HandleGameStarted(state));

        HubConnection.On<GameStateDto>("GameStateUpdated", async state =>
            await UpdateGameState(state));

        await HubConnection.StartAsync();
        await HubConnection.InvokeAsync("JoinGame", SessionId, UserId);
    }


    [JSInvokable]
    public async Task HandleGameStarted(GameStateDto state)
    {
        GameSession.GameState = state;
        GameStarted = true;
        UserNumber = state.PlayerNumber;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task UpdateGameState(GameStateDto state)
    {
        GameSession.GameState = state;
        StateHasChanged();
    }

    private async Task HandleCellClick(int x, int y)
    {
        if (GameSession.GameState.Win > 0) return;

        await HubConnection.InvokeAsync("PlaceChip", SessionId, UserId, x, y);
    }

    private async Task HandleMoveBoard(string direction)
    {
        await HubConnection.InvokeAsync("MoveBoard", SessionId, UserId, direction);
    }

    private string GetCellContent(int x, int y)
    {
        return GameState.Board[x][y] switch
        {
            1 => "X",
            2 => "O",
            _ => ""
        };
    }

    private string GetBoardStyle()
    {
        var boardSize = GameState.BoardWidth * GetCellSize();
        return $"position: relative; width: {boardSize}px;";
    }

    private string GetMovableGridStyle()
    {
        var cellSize = GetCellSize();
        return $"width: {GameState.MovableBoardWidth * cellSize}px; " +
               $"height: {GameState.MovableBoardHeight * cellSize}px; " +
               $"border: 3px solid red; position: absolute; " +
               $"pointer-events: none; left: {GameState.GridX * cellSize}px; " +
               $"top: {GameState.GridY * cellSize}px;";
    }

    private int GetCellSize()
    {
        return 80;
    }

    private void ShowSaveModal()
    {
        ShowModal = true;
        StateHasChanged();
    }

    private void CloseSaveModal()
    {
        ShowModal = false;
        StateHasChanged();
    }

    private async Task SaveGame()
    {
        var response = await Http.PostAsJsonAsync("/api/game/save", new 
        { 
            SessionId, 
            Name = SaveName,
            GameState 
        });
        
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error saving game");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection != null)
        {
            await HubConnection.DisposeAsync();
        }
        DotNetRef?.Dispose();
    }
}