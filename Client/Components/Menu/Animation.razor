@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div class="tic-tac-container">
    <div @ref="boardElement" class="board">
        @foreach (var cell in cells)
        {
            <div class="cell" @key="cell.Id">
                @if (cell.Symbol != null)
                {
                    <div class="@cell.Symbol @(cell.IsAnimating ? "animating" : "")"></div>
                }
            </div>
        }
        <div @ref="winLineElement" class="win-line" style="@winLineStyle"></div>
    </div>
</div>

@code {
    private ElementReference boardElement;
    private ElementReference winLineElement;
    private readonly List<CellData> cells = new();
    private string winLineStyle = "display: none;";
    private Timer? animationTimer;
    private int animationStep = 0;

    protected override void OnInitialized()
    {
        // Инициализация 25 клеток (5x5)
        for (int i = 0; i < 25; i++)
        {
            cells.Add(new CellData(i));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Инициализация JS функций
            await JSRuntime.InvokeVoidAsync("eval", 
                @"window.ticTacAnimation = {
                    positionWinLine: function(board, winLine, startIdx, endIdx) {
                        const cells = board.querySelectorAll('.cell');
                        if (!cells[startIdx] || !cells[endIdx]) return;
                        
                        const startCell = cells[startIdx].getBoundingClientRect();
                        const endCell = cells[endIdx].getBoundingClientRect();
                        const boardRect = board.getBoundingClientRect();
                        
                        winLine.style.width = `${endCell.right - startCell.left}px`;
                        winLine.style.height = '10px';
                        winLine.style.left = `${startCell.left - boardRect.left}px`;
                        winLine.style.top = `${startCell.top + startCell.height/2 - boardRect.top - 5}px`;
                        winLine.style.display = 'block';
                        winLine.style.transform = 'scaleX(0)';
                        
                        setTimeout(() => {
                            winLine.style.transition = 'transform 0.8s ease-out';
                            winLine.style.transform = 'scaleX(1)';
                        }, 10);
                    }
                }");
                
            StartAnimation();
        }
    }

    private void StartAnimation()
    {
        animationTimer = new Timer(async _ => await NextAnimationStep(), 
            null, 500, Timeout.Infinite);
    }

    private async Task NextAnimationStep()
    {
        animationStep++;
        
        switch (animationStep)
        {
            case 1: await AnimateCell(12, "x"); break; // Центр
            case 2: await AnimateCell(13, "o"); break; // Право
            case 3: await AnimateCell(11, "x"); break; // Лево
            case 4: await AnimateCell(17, "o"); break; // Низ
            case 5: await AnimateCell(7, "x"); break;  // Верх
            case 6: 
                await ShowWinLine(10, 14); // Горизонтальная линия
                animationTimer?.Dispose();
                return;
        }
        
        animationTimer?.Change(500, Timeout.Infinite);
    }

    private async Task AnimateCell(int index, string symbol)
    {
        if (index < 0 || index >= cells.Count) return;
        
        cells[index].Symbol = symbol;
        cells[index].IsAnimating = true;
        StateHasChanged();
        
        await Task.Delay(300);
        cells[index].IsAnimating = false;
        StateHasChanged();
    }

    private async Task ShowWinLine(int startIdx, int endIdx)
    {
        if (startIdx < 0 || endIdx >= cells.Count) return;
        
        winLineStyle = "";
        StateHasChanged();
        
        // Даем время Blazor обновить DOM
        await Task.Delay(50);
        
        await JSRuntime.InvokeVoidAsync("ticTacAnimation.positionWinLine", 
            boardElement, winLineElement, startIdx, endIdx);
    }

    public async ValueTask DisposeAsync()
    {
        animationTimer?.Dispose();
        await JSRuntime.InvokeVoidAsync("eval", "delete window.ticTacAnimation");
    }

    private class CellData
    {
        public string Id { get; } = Guid.NewGuid().ToString();
        public int Index { get; }
        public string? Symbol { get; set; }
        public bool IsAnimating { get; set; }

        public CellData(int index)
        {
            Index = index;
        }
    }
}