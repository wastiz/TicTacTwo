@using Microsoft.AspNetCore.Components
@using System.Timers
@implements IDisposable

<div class="game-animation-container">
    <div class="game-board">
        @for (int row = 0; row < 5; row++)
        {
            @for (int col = 0; col < 5; col++)
            {
                int currentRow = row;
                int currentCol = col;
                <div class="cell @GetCellClass(currentRow, currentCol)" 
                     style="@GetCellStyle(currentRow, currentCol)">
                    @if (board[currentRow, currentCol] != ' ')
                    {
                        <span class="symbol @GetSymbolClass(currentRow, currentCol)">
                            @board[currentRow, currentCol]
                        </span>
                    }
                </div>
            }
        }
    </div>
    
    @if (showWinLine)
    {
        <div class="win-line" style="@GetWinLineStyle()"></div>
    }
</div>

@code {
    private char[,] board = new char[5, 5];
    private Timer animationTimer;
    private int animationStep = 0;
    private bool showWinLine = false;
    private int[] winningCells = new int[0];
    private string winDirection = "";
    private bool isAnimating = false;
    
    private readonly (int row, int col, char symbol)[] moveSequence = new[]
    {
        (2, 2, 'X'),
        (1, 1, 'O'),
        (3, 1, 'X'),
        (3, 3, 'O'), // Диагональ
        (2, 3, 'X'), // Вправо от центра
        (0, 0, 'O'), // Угол
        (2, 0, 'X'), // Левый край
        (4, 4, 'O'), // Угол
        (2, 4, 'X'), // Правый край - победа!
    };

    protected override void OnInitialized()
    {
        InitializeBoard();
        StartAnimation();
    }

    private void InitializeBoard()
    {
        for (int i = 0; i < 5; i++)
        {
            for (int j = 0; j < 5; j++)
            {
                board[i, j] = ' ';
            }
        }
    }

    private void StartAnimation()
    {
        animationTimer = new Timer(800);
        animationTimer.Elapsed += OnAnimationTick;
        animationTimer.Start();
    }

    private async void OnAnimationTick(object sender, ElapsedEventArgs e)
    {
        if (isAnimating) return;
        
        isAnimating = true;
        
        await InvokeAsync(async () =>
        {
            if (animationStep < moveSequence.Length)
            {
                var move = moveSequence[animationStep];
                board[move.row, move.col] = move.symbol;
                animationStep++;
                
                if (CheckWin())
                {
                    showWinLine = true;
                    StateHasChanged();
                    
                    await Task.Delay(2000);
                    RestartAnimation();
                }
                
                StateHasChanged();
            }
            else
            {
                RestartAnimation();
            }
        });
        
        isAnimating = false;
    }

    private bool CheckWin()
    {
        for (int row = 0; row < 5; row++)
        {
            for (int col = 0; col <= 1; col++)
            {
                if (board[row, col] != ' ' && 
                    board[row, col] == board[row, col + 1] && 
                    board[row, col] == board[row, col + 2] && 
                    board[row, col] == board[row, col + 3])
                {
                    winningCells = new int[] { row * 5 + col, row * 5 + col + 1, row * 5 + col + 2, row * 5 + col + 3 };
                    winDirection = "horizontal";
                    return true;
                }
            }
        }

        for (int col = 0; col < 5; col++)
        {
            for (int row = 0; row <= 1; row++)
            {
                if (board[row, col] != ' ' && 
                    board[row, col] == board[row + 1, col] && 
                    board[row, col] == board[row + 2, col] && 
                    board[row, col] == board[row + 3, col])
                {
                    winningCells = new int[] { row * 5 + col, (row + 1) * 5 + col, (row + 2) * 5 + col, (row + 3) * 5 + col };
                    winDirection = "vertical";
                    return true;
                }
            }
        }
        
        for (int row = 0; row <= 1; row++)
        {
            for (int col = 0; col <= 1; col++)
            {
                if (board[row, col] != ' ' && 
                    board[row, col] == board[row + 1, col + 1] && 
                    board[row, col] == board[row + 2, col + 2] && 
                    board[row, col] == board[row + 3, col + 3])
                {
                    winningCells = new int[] { row * 5 + col, (row + 1) * 5 + col + 1, (row + 2) * 5 + col + 2, (row + 3) * 5 + col + 3 };
                    winDirection = "diagonal";
                    return true;
                }
            }
        }
        
        for (int row = 0; row <= 1; row++)
        {
            for (int col = 3; col < 5; col++)
            {
                if (board[row, col] != ' ' && 
                    board[row, col] == board[row + 1, col - 1] && 
                    board[row, col] == board[row + 2, col - 2] && 
                    board[row, col] == board[row + 3, col - 3])
                {
                    winningCells = new int[] { row * 5 + col, (row + 1) * 5 + col - 1, (row + 2) * 5 + col - 2, (row + 3) * 5 + col - 3 };
                    winDirection = "anti-diagonal";
                    return true;
                }
            }
        }

        return false;
    }

    private void RestartAnimation()
    {
        InitializeBoard();
        animationStep = 0;
        showWinLine = false;
        winningCells = new int[0];
        winDirection = "";
    }

    private string GetCellClass(int row, int col)
    {
        int cellIndex = row * 5 + col;
        if (winningCells.Contains(cellIndex))
        {
            return "winning";
        }
        return "";
    }

    private string GetCellStyle(int row, int col)
    {
        return $"grid-row: {row + 1}; grid-column: {col + 1};";
    }

    private string GetSymbolClass(int row, int col)
    {
        var symbol = board[row, col];
        var baseClass = symbol == 'X' ? "x" : "o";
        return $"{baseClass} show";
    }

    private string GetWinLineStyle()
    {
        if (winningCells.Length == 0) return "";

        var firstCell = winningCells[0];
        var lastCell = winningCells[winningCells.Length - 1];
        
        int firstRow = firstCell / 5;
        int firstCol = firstCell % 5;
        int lastRow = lastCell / 5;
        int lastCol = lastCell % 5;

        var cellSize = 52;
        var gap = 3;

        var startX = 30 + firstCol * (cellSize + gap) + cellSize / 2;
        var startY = 30 + firstRow * (cellSize + gap) + cellSize / 2;
        var endX = 30 + lastCol * (cellSize + gap) + cellSize / 2;
        var endY = 30 + lastRow * (cellSize + gap) + cellSize / 2;

        var width = Math.Abs(endX - startX);
        var height = Math.Abs(endY - startY);

        if (winDirection == "horizontal")
        {
            return $"left: {Math.Min(startX, endX) - width/2}px; top: {startY - 3}px; --line-width: {width}px; --line-height: 6px; width: {width}px; height: 6px;";
        }
        else if (winDirection == "vertical")
        {
            return $"left: {startX - 3}px; top: {Math.Min(startY, endY) - height/2}px; --line-width: 6px; --line-height: {height}px; width: 6px; height: {height}px;";
        }
        else
        {
            var length = Math.Sqrt(width * width + height * height);
            var angle = Math.Atan2(endY - startY, endX - startX) * 180 / Math.PI;
            
            return $"left: {startX}px; top: {startY - 3}px; --line-width: {length}px; --line-height: 6px; width: {length}px; height: 6px; transform-origin: 0 50%; transform: rotate({angle}deg);";
        }
    }

    public void Dispose()
    {
        animationTimer?.Dispose();
    }
}