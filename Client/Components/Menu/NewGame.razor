@page "/new-game"
@attribute [Authorize]
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using Shared
@using Shared.GameConfigDtos
@using Shared.GameSessionDtos
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav

<EditForm Model="@_gameModel" OnValidSubmit="HandleValidSubmit" class="container h-100 d-flex flex-column">
    <button @onclick="OnMainOptions" class="btn btn-primary">Back</button>
    <div class="row">
        <h3>Choose Game Mode:</h3>
        <div class="btn-group d-flex flex-column" role="group">
            @foreach (var mode in _gameModeList)
            {
                <button type="button"
                        class="btn @(_gameModel.GameMode == mode.Value ? "btn-primary" : "btn-outline-primary") mb-2"
                        @onclick="() => ToggleSelection(mode.Value)">
                    @mode.Label
                </button>
            }
        </div>

        <h3>Choose Game Configuration:</h3>
        <div class="col-12">
            <InputRadioGroup @bind-Value="_gameModel.ConfigId">
                <InputRadio id="classic" Value=@("classic")/>
                <label class="btn" for="classic">Classical</label>

                <InputRadio id="big-game" Value=@("big-game")/>
                <label class="btn" for="big-game">Big Game</label>

                @foreach (var config in ConfigList)
                {
                    <InputRadio id="@config.Id" Value="@config.Id"/>
                    <label class="btn" for="@config.Id">@config.Name</label>
                }
            </InputRadioGroup>
        </div>

        <div class="col-12 mt-5">
            <button type="submit" class="btn btn-primary">Start Game</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public List<GameConfig> ConfigList { get; set; }
    [Parameter] public EventCallback OnMainOptions { get; set; }
    private Task OnNewGameClicked() => OnMainOptions.InvokeAsync();
    
    private GameModel _gameModel = new GameModel
    {
        GameMode = "two-players",
        ConfigId = "classic"
    };
    
    private List<GameMode> _gameModeList = GameModes.All;

    private void ToggleSelection(string value)
    {
        if (_gameModel.GameMode == value)
            _gameModel.GameMode = null;
        else
            _gameModel.GameMode = value;
    }

    private async void HandleValidSubmit()
    {
        var token = await localStorage.GetItemAsync<string>("accessToken");

        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        
        var response = await Http.PostAsJsonAsync("http://localhost:5192/api/game-sessions/create", new CreateSessionRequest
        {
            ConfigId = _gameModel.ConfigId,
            GameMode = _gameModel.GameMode,
            Password = null
        });
        
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<CreateSessionResponse>();
            Nav.NavigateTo($"/game/{result.SessionId}");
        }
        else
        {
            Console.WriteLine("Error creating config");
        }
    }

    public class GameModel
    {
        [Required]
        public string GameMode { get; set; }

        [Required]
        public string ConfigId { get; set; }
    }
}
