@using Microsoft.AspNetCore.Authorization
@using Shared.GameSessionDtos
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>Load Game</PageTitle>

<div class="container">
    <button class="btn btn-primary mb-4" @onclick="OnMainOptions">Back</button>
    <div class="row">
        <div class="col-12 col-sm-12 col-md-12 mt-12">
            <EditForm Model="@this" OnValidSubmit="StartGame">
                <h1>Select Game Session:</h1>
                <div class="load-game-container overflow-auto p-3">
                    <InputRadioGroup @bind-Value="SelectedSessionId">
                        @foreach (var session in Games)
                        {
                            <div class="session-item d-flex align-items-center justify-content-between w-100 mb-3">
                                <div>
                                    <InputRadio class="btn-check" Value="@session.Id" id=@($"game-{session.Id}") />
                                    <label class="btn btn-outline-primary btn-sm" for="game-@session.Id">
                                        @session.Name
                                    </label>
                                </div>
                                <button type="button" class="btn btn-danger btn-sm"
                                        @onclick="@(() => DeleteSession(session.Id))">
                                    Delete
                                </button>
                            </div>
                        }
                    </InputRadioGroup>
                </div>

                <div class="col-12 mt-5">
                    <button type="submit" class="btn btn-primary w-100" disabled="@string.IsNullOrEmpty(SelectedSessionId)">
                        Start Game
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<GameSessionDto> Games = new();
    private string SelectedSessionId;

    protected override async Task OnInitializedAsync()
    {
        Games = await Http.GetFromJsonAsync<List<GameSessionDto>>("api/game-sessions/user");
    }
    
    [Parameter] public EventCallback OnMainOptions { get; set; }
    private Task OnLoadGameClicked() => OnMainOptions.InvokeAsync();

    private async Task DeleteSession(string sessionId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this session?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"api/game-sessions/{sessionId}");
        if (response.IsSuccessStatusCode)
        {
            Games = Games.Where(g => g.Id != sessionId).ToList();
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to delete the session.");
        }
    }

    private async Task StartGame()
    {
        if (!string.IsNullOrEmpty(SelectedSessionId))
        {
            Navigation.NavigateTo($"/game/{SelectedSessionId}");
        }
    }

    [Inject] NavigationManager Navigation { get; set; }
    [Inject] IJSRuntime JS { get; set; }
}
