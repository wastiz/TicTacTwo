// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250712114406_InitialCreate_17")]
    partial class InitialCreate_17
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.GameConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AbilitiesAfterNMoves")
                        .HasColumnType("integer");

                    b.Property<int>("BoardSizeHeight")
                        .HasColumnType("integer");

                    b.Property<int>("BoardSizeWidth")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("MovableBoardHeight")
                        .HasColumnType("integer");

                    b.Property<int>("MovableBoardWidth")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Player1Chips")
                        .HasColumnType("integer");

                    b.Property<int>("Player2Chips")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("WinCondition")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GameConfigurations");

                    b.HasData(
                        new
                        {
                            Id = "classic",
                            AbilitiesAfterNMoves = 2,
                            BoardSizeHeight = 5,
                            BoardSizeWidth = 5,
                            MovableBoardHeight = 3,
                            MovableBoardWidth = 3,
                            Name = "Classical",
                            Player1Chips = 4,
                            Player2Chips = 4,
                            WinCondition = 3
                        },
                        new
                        {
                            Id = "big-game",
                            AbilitiesAfterNMoves = 3,
                            BoardSizeHeight = 10,
                            BoardSizeWidth = 10,
                            MovableBoardHeight = 5,
                            MovableBoardWidth = 5,
                            Name = "Big Game",
                            Player1Chips = 6,
                            Player2Chips = 6,
                            WinCondition = 3
                        });
                });

            modelBuilder.Entity("Domain.GameSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GameConfigId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GameMode")
                        .HasColumnType("text");

                    b.Property<string>("GamePassword")
                        .HasColumnType("text");

                    b.Property<string>("GameStateId")
                        .HasColumnType("text");

                    b.Property<int>("GameStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastSaveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Player1Id")
                        .HasColumnType("text");

                    b.Property<string>("Player2Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameConfigId");

                    b.HasIndex("GameStateId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("Domain.GameState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BoardJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChipsLeftJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GridX")
                        .HasColumnType("integer");

                    b.Property<int>("GridY")
                        .HasColumnType("integer");

                    b.Property<bool>("Player1Abilities")
                        .HasColumnType("boolean");

                    b.Property<bool>("Player2Abilities")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Win")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GamesLost")
                        .HasColumnType("integer");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("GamesWon")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.GameConfiguration", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.GameSession", b =>
                {
                    b.HasOne("Domain.GameConfiguration", "GameConfiguration")
                        .WithMany()
                        .HasForeignKey("GameConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.GameState", "GameState")
                        .WithMany()
                        .HasForeignKey("GameStateId");

                    b.HasOne("Domain.User", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id");

                    b.HasOne("Domain.User", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");

                    b.Navigation("GameConfiguration");

                    b.Navigation("GameState");

                    b.Navigation("Player1");

                    b.Navigation("Player2");
                });
#pragma warning restore 612, 618
        }
    }
}
